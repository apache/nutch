<?xml version="1.0"?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" 
          "http://forrest.apache.org/dtd/document-v20.dtd">

<document>

<header>
  <title>Nutch version 0.7 tutorial</title> 
</header> 

<body>

<section>
<title>Requirements</title>
<ol>
  <li>Java 1.4.x, either from <a
 href="http://java.sun.com/j2se/downloads.html">Sun</a> or <a
 href="http://www-106.ibm.com/developerworks/java/jdk/">IBM</a> on
 Linux is preferred.  Set <code>NUTCH_JAVA_HOME</code> to the root
 of your JVM installation.
  </li>
  <li>Apache's <a href="http://jakarta.apache.org/tomcat/">Tomcat</a>
4.x.</li>
  <li>On Win32, <a href="http://www.cygwin.com/">cygwin</a>, for
shell support.  (If you plan to use Subversion on Win32, be sure to select the subversion package when you install, in the "Devel" category.)</li>
  <li>Up to a gigabyte of free disk space, a high-speed connection, and
an hour or so.
  </li>
</ol>
</section>
<section>
<title>Getting Started</title>

<p>First, you need to get a copy of the Nutch code.  You can download
a release from <a
href="http://lucene.apache.org/nutch/release/">http://lucene.apache.org/nutch/release/</a>.
Unpack the release and connect to its top-level directory.  Or, check
out the latest source code from <a
href="version_control.html">subversion</a> and build it
with <a href="http://ant.apache.org/">Ant</a>.</p>

<p>Try the following command:</p>
<source>bin/nutch</source>
<p>This will display the documentation for the Nutch command script.</p>

<p>Now we're ready to crawl.  There are two approaches to crawling:</p>
<ol>
<li>Intranet crawling, with the <code>crawl</code> command.</li>
<li>Whole-web crawling, with much greater control, using the lower
level <code>inject</code>, <code>generate</code>, <code>fetch</code>
and <code>updatedb</code> commands.</li>
</ol>

</section>
<section>
<title>Intranet Crawling</title>

<p>Intranet crawling is more appropriate when you intend to crawl up to
around one million pages on a handful of web servers.</p>

<section>
<title>Intranet: Configuration</title>

<p>To configure things for intranet crawling you must:</p>

<ol>

<li>Create a flat file of root urls.  For example, to crawl the
<code>nutch</code> site you might start with a file named
<code>urls</code> containing just the Nutch home page.  All other
Nutch pages should be reachable from this page.  The <code>urls</code>
file would thus look like:
<source>
http://lucene.apache.org/nutch/
</source>
</li>

<li>Edit the file <code>conf/crawl-urlfilter.txt</code> and replace
<code>MY.DOMAIN.NAME</code> with the name of the domain you wish to
crawl.  For example, if you wished to limit the crawl to the
<code>apache.org</code> domain, the line should read:
<source>
+^http://([a-z0-9]*\.)*apache.org/
</source>
This will include any url in the domain <code>apache.org</code>.
</li>

</ol>

</section>
<section>
<title>Intranet: Running the Crawl</title>

<p>Once things are configured, running the crawl is easy.  Just use the
crawl command.  Its options include:</p>

<ul>
<li><code>-dir</code> <em>dir</em> names the directory to put the crawl in.</li>
<li><code>-depth</code> <em>depth</em> indicates the link depth from the root
page that should be crawled.</li>
<li><code>-delay</code> <em>delay</em> determines the number of seconds
between accesses to each host.</li>
<li><code>-threads</code> <em>threads</em> determines the number of
threads that will fetch in parallel.</li>
</ul>

<p>For example, a typical call might be:</p>

<source>
bin/nutch crawl urls -dir crawl.test -depth 3 >&amp; crawl.log
</source>

<p>Typically one starts testing one's configuration by crawling at low
depths, and watching the output to check that desired pages are found.
Once one is more confident of the configuration, then an appropriate
depth for a full crawl is around 10.</p>

<p>Once crawling has completed, one can skip to the Searching section
below.</p>

</section>
</section>

<section>
<title>Whole-web Crawling</title>

<p>Whole-web crawling is designed to handle very large crawls which may
take weeks to complete, running on multiple machines.</p>

<section>
<title>Whole-web: Concepts</title>

<p>Nutch data is of two types:</p>

<ol>
  <li>The web database.  This contains information about every
page known to Nutch, and about links between those pages.</li>
  <li>A set of segments.  Each segment is a set of pages that are
fetched and indexed as a unit.  Segment data consists of the
following types:</li>
  <li><ul>
    <li>a <em>fetchlist</em> is a file
that names a set of pages to be fetched</li>
    <li>the<em> fetcher output</em> is a
set of files containing the fetched pages</li>
    <li>the <em>index </em>is a
Lucene-format index of the fetcher output.</li>
  </ul></li>
</ol>
<p>In the following examples we will keep our web database in a directory
named <code>db</code> and our segments
in a directory named <code>segments</code>:</p>
<source>mkdir db
mkdir segments</source>

</section>
<section>
<title>Whole-web: Boostrapping the Web Database</title>
<p>The admin tool is used to create a new, empty database:</p>

<source>bin/nutch admin db -create</source>

<p>The <em>injector</em> adds urls into the database.  Let's inject
URLs from the <a href="http://dmoz.org/">DMOZ</a> Open
Directory. First we must download and uncompress the file listing all
of the DMOZ pages.  (This is a 200+Mb file, so this will take a few
minutes.)</p>

<source>wget http://rdf.dmoz.org/rdf/content.rdf.u8.gz
gunzip content.rdf.u8.gz</source>

<p>Next we inject a random subset of these pages into the web database.
 (We use a random subset so that everyone who runs this tutorial
doesn't hammer the same sites.)  DMOZ contains around three million
URLs.  We inject one out of every 3000, so that we end up with
around 1000 URLs:</p>

<source>bin/nutch inject db -dmozfile content.rdf.u8 -subset 3000</source>

<p>This also takes a few minutes, as it must parse the full file.</p>

<p>Now we have a web database with around 1000 as-yet unfetched URLs in it.</p>

</section>
<section>
<title>Whole-web: Fetching</title>
<p>To fetch, we first generate a fetchlist from the database:</p>
<source>bin/nutch generate db segments
</source>
<p>This generates a fetchlist for all of the pages due to be fetched.
 The fetchlist is placed in a newly created segment directory.
 The segment directory is named by the time it's created.  We
save the name of this segment in the shell variable <code>s1</code>:</p>
<source>s1=`ls -d segments/2* | tail -1`
echo $s1
</source>
<p>Now we run the fetcher on this segment with:</p>
<source>bin/nutch fetch $s1</source>
<p>When this is complete, we update the database with the results of the
fetch:</p>
<source>bin/nutch updatedb db $s1</source>
<p>Now the database has entries for all of the pages referenced by the
initial set.</p>

<p>Now we fetch a new segment with the top-scoring 1000 pages:</p>
<source>bin/nutch generate db segments -topN 1000
s2=`ls -d segments/2* | tail -1`
echo $s2

bin/nutch fetch $s2
bin/nutch updatedb db $s2
</source>
<p>Let's fetch one more round:</p>
<source>
bin/nutch generate db segments -topN 1000
s3=`ls -d segments/2* | tail -1`
echo $s3

bin/nutch fetch $s3
bin/nutch updatedb db $s3
</source>

<p>By this point we've fetched a few thousand pages.  Let's index
them!</p>

</section>
<section>
<title>Whole-web: Indexing</title>
<p>To index each segment we use the <code>index</code>
command, as follows:</p>
<source>bin/nutch index $s1
bin/nutch index $s2
bin/nutch index $s3</source>

<p>Then, before we can search a set of segments, we need to delete
duplicate pages.  This is done with:</p>

<source>bin/nutch dedup segments dedup.tmp</source>

<p>Now we're ready to search!</p>

</section>
<section>
<title>Searching</title>

<p>To search you need to put the nutch war file into your servlet
container.  (If instead of downloading a Nutch release you checked the
sources out of SVN, then you'll first need to build the war file, with
the command <code>ant war</code>.)</p>

<p>Assuming you've unpacked Tomcat as ~/local/tomcat, then the Nutch war
file may be installed with the commands:</p>

<source>rm -rf ~/local/tomcat/webapps/ROOT*
cp nutch*.war ~/local/tomcat/webapps/ROOT.war
</source>

<p>The webapp finds its indexes in <code>./segments</code>, relative
to where you start Tomcat, so, if you've done intranet crawling,
connect to your crawl directory, or, if you've done whole-web
crawling, don't change directories, and give the command:</p>

<source>~/local/tomcat/bin/catalina.sh start
</source>

<p>Then visit <a href="http://localhost:8080/">http://localhost:8080/</a>
and have fun!</p>

<p>More detailed tutorials are available on the Nutch Wiki.
</p>
</section>
</section>

</body>
</document>
