<?xml version="1.0"?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" 
          "http://forrest.apache.org/dtd/document-v20.dtd">

<document>

<header>
  <title>Nutch version 0.8.x tutorial</title> 
</header> 

<body>

<section>
<title>Requirements</title>
<ol>
  <li>Java 1.4.x, either from <a
 href="http://java.sun.com/j2se/downloads.html">Sun</a> or <a
 href="http://www-106.ibm.com/developerworks/java/jdk/">IBM</a> on
 Linux is preferred.  Set <code>NUTCH_JAVA_HOME</code> to the root
 of your JVM installation.
  </li>
  <li>Apache's <a href="http://jakarta.apache.org/tomcat/">Tomcat</a>
4.x.</li>
  <li>On Win32, <a href="http://www.cygwin.com/">cygwin</a>, for
shell support.  (If you plan to use Subversion on Win32, be sure to select the subversion package when you install, in the "Devel" category.)</li>
  <li>Up to a gigabyte of free disk space, a high-speed connection, and
an hour or so.
  </li>
</ol>
</section>
<section>
<title>Getting Started</title>

<p>First, you need to get a copy of the Nutch code.  You can download
a release from <a
href="http://lucene.apache.org/nutch/release/">http://lucene.apache.org/nutch/release/</a>.
Unpack the release and connect to its top-level directory.  Or, check
out the latest source code from <a
href="version_control.html">subversion</a> and build it
with <a href="http://ant.apache.org/">Ant</a>.</p>

<p>Try the following command:</p>
<source>bin/nutch</source>
<p>This will display the documentation for the Nutch command script.</p>

<p>Now we're ready to crawl.  There are two approaches to crawling:</p>
<ol>
<li>Intranet crawling, with the <code>crawl</code> command.</li>
<li>Whole-web crawling, with much greater control, using the lower
level <code>inject</code>, <code>generate</code>, <code>fetch</code>
and <code>updatedb</code> commands.</li>
</ol>

</section>
<section>
<title>Intranet Crawling</title>

<p>Intranet crawling is more appropriate when you intend to crawl up to
around one million pages on a handful of web servers.</p>

<section>
<title>Intranet: Configuration</title>

<p>To configure things for intranet crawling you must:</p>

<ol>

<li>Create a directory with a flat file of root urls.  For example, to
crawl the <code>nutch</code> site you might start with a file named
<code>urls/nutch</code> containing the url of just the Nutch home
page.  All other Nutch pages should be reachable from this page.  The
<code>urls/nutch</code> file would thus contain:
<source>
http://lucene.apache.org/nutch/
</source>
</li>

<li>Edit the file <code>conf/crawl-urlfilter.txt</code> and replace
<code>MY.DOMAIN.NAME</code> with the name of the domain you wish to
crawl.  For example, if you wished to limit the crawl to the
<code>apache.org</code> domain, the line should read:
<source>
+^http://([a-z0-9]*\.)*apache.org/
</source>
This will include any url in the domain <code>apache.org</code>.
</li>
<li>Edit the file <code>conf/nutch-site.xml</code>, insert at minimum
following properties into it and edit in proper values for the properties:
<source>
<![CDATA[
<property>
  <name>http.agent.name</name>
  <value></value>
  <description>HTTP 'User-Agent' request header. MUST NOT be empty - 
  please set this to a single word uniquely related to your organization.

  NOTE: You should also check other related properties:

	http.robots.agents
	http.agent.description
	http.agent.url
	http.agent.email
	http.agent.version

  and set their values appropriately.

  </description>
</property>

<property>
  <name>http.agent.description</name>
  <value></value>
  <description>Further description of our bot- this text is used in
  the User-Agent header.  It appears in parenthesis after the agent name.
  </description>
</property>

<property>
  <name>http.agent.url</name>
  <value></value>
  <description>A URL to advertise in the User-Agent header.  This will 
   appear in parenthesis after the agent name. Custom dictates that this
   should be a URL of a page explaining the purpose and behavior of this
   crawler.
  </description>
</property>

<property>
  <name>http.agent.email</name>
  <value></value>
  <description>An email address to advertise in the HTTP 'From' request
   header and User-Agent header. A good practice is to mangle this
   address (e.g. 'info at example dot com') to avoid spamming.
  </description>
</property>

]]>
</source>
</li>
</ol>

</section>
<section>
<title>Intranet: Running the Crawl</title>

<p>Once things are configured, running the crawl is easy.  Just use the
crawl command.  Its options include:</p>

<ul>
<li><code>-dir</code> <em>dir</em> names the directory to put the crawl in.</li>
<li><code>-threads</code> <em>threads</em> determines the number of
threads that will fetch in parallel.</li>
<li><code>-depth</code> <em>depth</em> indicates the link depth from the root
page that should be crawled.</li>
<li><code>-topN</code> <em>N</em> determines the maximum number of pages that
will be retrieved at each level up to the depth.</li>
</ul>

<p>For example, a typical call might be:</p>

<source>
bin/nutch crawl urls -dir crawl -depth 3 -topN 50
</source>

<p>Typically one starts testing one's configuration by crawling at
shallow depths, sharply limiting the number of pages fetched at each
level (<code>-topN</code>), and watching the output to check that
desired pages are fetched and undesirable pages are not.  Once one is
confident of the configuration, then an appropriate depth for a full
crawl is around 10.  The number of pages per level
(<code>-topN</code>) for a full crawl can be from tens of thousands to
millions, depending on your resources.</p>

<p>Once crawling has completed, one can skip to the Searching section
below.</p>

</section>
</section>

<section>
<title>Whole-web Crawling</title>

<p>Whole-web crawling is designed to handle very large crawls which may
take weeks to complete, running on multiple machines.</p>

<section>
<title>Whole-web: Concepts</title>

<p>Nutch data is composed of:</p>

<ol>

  <li>The crawl database, or <em>crawldb</em>.  This contains
information about every url known to Nutch, including whether it was
fetched, and, if so, when.</li>

  <li>The link database, or <em>linkdb</em>.  This contains the list
of known links to each url, including both the source url and anchor
text of the link.</li>

  <li>A set of <em>segments</em>.  Each segment is a set of urls that are
fetched as a unit.  Segments are directories with the following
subdirectories:</li>

  <li><ul>
    <li>a <em>crawl_generate</em> names a set of urls to be fetched</li>
    <li>a <em>crawl_fetch</em> contains the status of fetching each url</li>
    <li>a <em>content</em> contains the content of each url</li>
    <li>a <em>parse_text</em> contains the parsed text of each url</li>
    <li>a <em>parse_data</em> contains outlinks and metadata parsed
    from each url</li>
    <li>a <em>crawl_parse</em> contains the outlink urls, used to
    update the crawldb</li>
  </ul></li>

<li>The <em>indexes</em>are Lucene-format indexes.</li>

</ol>

</section>
<section>
<title>Whole-web: Boostrapping the Web Database</title>

<p>The <em>injector</em> adds urls to the crawldb.  Let's inject URLs
from the <a href="http://dmoz.org/">DMOZ</a> Open Directory. First we
must download and uncompress the file listing all of the DMOZ pages.
(This is a 200+Mb file, so this will take a few minutes.)</p>

<source>wget http://rdf.dmoz.org/rdf/content.rdf.u8.gz
gunzip content.rdf.u8.gz</source>

<p>Next we select a random subset of these pages.
 (We use a random subset so that everyone who runs this tutorial
doesn't hammer the same sites.)  DMOZ contains around three million
URLs.  We select one out of every 5000, so that we end up with
around 1000 URLs:</p>

<source>mkdir dmoz
bin/nutch org.apache.nutch.tools.DmozParser content.rdf.u8 -subset 5000 &gt; dmoz/urls</source>

<p>The parser also takes a few minutes, as it must parse the full
file.  Finally, we initialize the crawl db with the selected urls.</p>

<source>bin/nutch inject crawl/crawldb dmoz</source>

<p>Now we have a web database with around 1000 as-yet unfetched URLs in it.</p>

</section>
<section>
<title>Whole-web: Fetching</title>
<p>
Starting from 0.8 nutch user agent identifier needs to be configured
before fetching. To do this you must edit the file <code>conf/nutch-site.xml</code>, insert at minimum
following properties into it and edit in proper values for the properties:
</p>
<source>
<![CDATA[
<property>
  <name>http.agent.name</name>
  <value></value>
  <description>HTTP 'User-Agent' request header. MUST NOT be empty - 
  please set this to a single word uniquely related to your organization.

  NOTE: You should also check other related properties:

  http.robots.agents
  http.agent.description
  http.agent.url
  http.agent.email
  http.agent.version

  and set their values appropriately.

  </description>
</property>

<property>
  <name>http.agent.description</name>
  <value></value>
  <description>Further description of our bot- this text is used in
  the User-Agent header.  It appears in parenthesis after the agent name.
  </description>
</property>

<property>
  <name>http.agent.url</name>
  <value></value>
  <description>A URL to advertise in the User-Agent header.  This will 
   appear in parenthesis after the agent name. Custom dictates that this
   should be a URL of a page explaining the purpose and behavior of this
   crawler.
  </description>
</property>

<property>
  <name>http.agent.email</name>
  <value></value>
  <description>An email address to advertise in the HTTP 'From' request
   header and User-Agent header. A good practice is to mangle this
   address (e.g. 'info at example dot com') to avoid spamming.
  </description>
</property>

]]>
</source>
<p>To fetch, we first generate a fetchlist from the database:</p>
<source>bin/nutch generate crawl/crawldb crawl/segments
</source>
<p>This generates a fetchlist for all of the pages due to be fetched.
 The fetchlist is placed in a newly created segment directory.
 The segment directory is named by the time it's created.  We
save the name of this segment in the shell variable <code>s1</code>:</p>
<source>s1=`ls -d crawl/segments/2* | tail -1`
echo $s1
</source>
<p>Now we run the fetcher on this segment with:</p>
<source>bin/nutch fetch $s1</source>
<p>When this is complete, we update the database with the results of the
fetch:</p>
<source>bin/nutch updatedb crawl/crawldb $s1</source>
<p>Now the database has entries for all of the pages referenced by the
initial set.</p>

<p>Now we fetch a new segment with the top-scoring 1000 pages:</p>
<source>bin/nutch generate crawl/crawldb crawl/segments -topN 1000
s2=`ls -d crawl/segments/2* | tail -1`
echo $s2

bin/nutch fetch $s2
bin/nutch updatedb crawl/crawldb $s2
</source>
<p>Let's fetch one more round:</p>
<source>
bin/nutch generate crawl/crawldb crawl/segments -topN 1000
s3=`ls -d crawl/segments/2* | tail -1`
echo $s3

bin/nutch fetch $s3
bin/nutch updatedb crawl/crawldb $s3
</source>

<p>By this point we've fetched a few thousand pages.  Let's index
them!</p>

</section>
<section>
<title>Whole-web: Indexing</title>

<p>Before indexing we first invert all of the links, so that we may
index incoming anchor text with the pages.</p>

<source>bin/nutch invertlinks crawl/linkdb crawl/segments/*</source>

<p>To index the segments we use the <code>index</code> command, as follows:</p>

<source>bin/nutch index crawl/indexes crawl/crawldb crawl/linkdb crawl/segments/*</source>

<!-- <p>Then, before we can search a set of segments, we need to delete -->
<!-- duplicate pages.  This is done with:</p> -->

<!-- <source>bin/nutch dedup indexes</source> -->

<p>Now we're ready to search!</p>

</section>
<section>
<title>Searching</title>
<p>
Simplest way to verify the integrity of your crawl is to launch NutchBean from command line:
</p>
<source>bin/nutch org.apache.nutch.searcher.NutchBean apache</source>
<p>
After you have verified that the above command returns results you can proceed to
setting up the web interface.
</p>
<p>To search you need to put the nutch war file into your servlet
container.  (If instead of downloading a Nutch release you checked the
sources out of SVN, then you'll first need to build the war file, with
the command <code>ant war</code>.)</p>

<p>Assuming you've unpacked Tomcat as ~/local/tomcat, then the Nutch war
file may be installed with the commands:</p>

<source>rm -rf ~/local/tomcat/webapps/ROOT*
cp nutch*.war ~/local/tomcat/webapps/ROOT.war
</source>

<p>The webapp finds its indexes in <code>./crawl</code>, relative
to where you start Tomcat, so use a command like:</p>

<source>~/local/tomcat/bin/catalina.sh start
</source>

<p>Then visit <a href="http://localhost:8080/">http://localhost:8080/</a>
and have fun!</p>

<p>More detailed tutorials are available on the Nutch Wiki.
</p>

</section>
</section>

</body>
</document>
